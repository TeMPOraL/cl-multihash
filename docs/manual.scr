@begin(section)
@title(Overview)
@link[uri=https://github.com/jbenet/multihash](Multihash) is a protocol for differentiating outputs from various well-established cryptographic hash functions, addressing size + encoding considerations.

It is useful to write applications that future-proof their use of hashes, and allow multiple hash functions to coexist. See @link[uri=https://github.com/jbenet/random-ideas/issues/1](https://github.com/jbenet/random-ideas/issues/1) for a longer discussion.

@begin(section)
@title(Format)

@begin(table)
    @begin(row)
        @cell(1 byte hash function code)
        @cell(1 byte digest size in bytes)
        @cell(hash function output)
    @end(row)
@end(table)

@end(section)

@begin(section)
@title(Binary example (only 4 bytes for simplicity))

@begin(table)
    @begin(header)
        @cell(fn)
        @cell(digest size)
        @cell(digest size hash digest)
    @end(header)
    @begin(row)
        @cell(00010001) 
        @cell(00000100)
        @cell(101101100 11111000 01011100 10110101)
    @end(row)
    @begin(row)
        @cell(sha1)
        @cell(4 bytes)
        @cell(4 byte sha1 digest)
    @end(row)
@end(table)

@end(section)
-- Copied from @link[uri=https://github.com/jbenet/multihash](https://github.com/jbenet/multihash)

For more information, see: @link[uri=https://github.com/jbenet/multihash](https://github.com/jbenet/multihash)

@end(section)

@begin(section)
@title(Examples)

@code[lang=lisp](
;; return the multihash of a sequence

(multihash:multihash-sequence 'multihash:sha256 (babel:string-to-octets "hello world"))

;; => #(18 32 185 77 39 185 147 77 62 8 165 46 82 215 218 125 171 250 196 132
;; 239 227 122 83 128 238 144 136 247 172 226 239 205 233)

;; return the multihash of a file

(multihash:multihash-file 'multihash:sha256 "test.txt")

;; => #(18 32 170 220 25 85 192 48 247 35 233 216 158 217 212 134 180 238 245
;; 176 209 198 148 91 224 221 107 123 52 13 66 146 142 201)

;; decode multihash into component parts

(multihash:decode (multihash:from-hex-string "11140beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33"))

;; => #S(CL-MULTIHASH::DECODED-MULTIHASH
;;   :CODE 17
;;   :NAME IRONCLAD:SHA1
;;   :LENGTH 20
;;   :DIGEST #(11 238 199 181 234 63 15 219 201 93 13 212 127 60 91 194 117 218
;;             138 51))
)

@end(section)

@begin(section)

@title(API)

@begin(section)
@title(Variables)
@cl:with-package[name="cl-multihash"](
@cl:doc(variable *multihash-definitions*)
)
@end(section)

@begin(section)
@title(Structs)
@cl:with-package[name="cl-multihash"](
@cl:doc(struct decoded-multihash)
)
@end(section)

@begin(section)
@title(Functions)
@cl:with-package[name="cl-multihash"](
@cl:doc(function encode)
@cl:doc(function decode)
@cl:doc(function multihash-file)
@cl:doc(function multihash-stream)
@cl:doc(function multihash-sequence)
@cl:doc(function app-code-p)
@cl:doc(function valid-code-p)
@cl:doc(function multihash-p)
@cl:doc(function from-base58)
@cl:doc(function to-base58)
@cl:doc(function from-hex-string)
@cl:doc(function to-hex-string)
)
@end(section)
@end(section)

